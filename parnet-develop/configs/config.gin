import torch
import pytorch_lightning
from pytorch_lightning import loggers

from parnet import networks
from parnet import layers
from parnet import metrics

train.network = @networks.PanRBPNet()
train.metrics = {'pcc': @metrics.PearsonCorrCoeff, 'filtered_pcc': @metrics.FilteredPearsonCorrCoeff}
train.batch_size = 4
train.shuffle = 1_000_000
train.max_epochs = 10
train.loggers = [@loggers.TensorBoardLogger, @loggers.WandbLogger]
train.log_every_n_steps = 1
train.track_grad_norm = 2
# train.accelerator = 'gpu'

# ------------------------- #
# --- Global Parameters --- #
# ------------------------- #

activation = @torch.nn.ReLU()
networks.PanRBPNet.num_tasks = 223
networks.PanRBPNet.dim = 128

# --------------- #
# --- Metrics --- # 
# --------------- #

metrics.FilteredPearsonCorrCoeff.min_height = 3
metrics.FilteredPearsonCorrCoeff.min_count = 10


# --------------- #
# --- Loggers --- # 
# --------------- #

loggers.WandbLogger.project = 'PanRBPNet'
loggers.WandbLogger.tags = ['test', 'local']


# ----------------- #
# --- Callbacks --- # 
# ----------------- #



# ----------------- #
# --- Optimizer --- # 
# ----------------- #

train.optimizer = @torch.optim.Adam
torch.optim.Adam.lr = 0.001


# ------------ #
# --- Stem --- #
# ------------ #

layers.stems.StemConv1D.kernel_size = 7
layers.stems.StemConv1D.filters = 256
layers.stems.StemConv1D.activation = %activation


# ------------ #
# --- Body --- #
# ------------ #

layers.towers.Conv1DTower.block_layer = @layers.blocks.ResConv1DBlock
layers.towers.Conv1DTower.layers_filters = [(6, 256), (3, 384)]
layers.towers.Conv1DTower.dilation = 1.25

# --> ResConv1DBlock
layers.blocks.ResConv1DBlock.kernel_size = 4
layers.blocks.ResConv1DBlock.dropout = 0.25
layers.blocks.ResConv1DBlock.activation = %activation

# ----------------- #
# --- Pointwise --- #
# ----------------- #

layers.base.Pointwise.activation = %activation

